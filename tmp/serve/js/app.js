/// <reference path="../../typings/jquery/jquery.d.ts" />
'use strict';

var app = app || {};

(function () {
  'use strict';

  $(function () {

    var $todolist = $('.js-todolist');
    var $inputText = $('.js-text');
    var $inputPriority = $('.js-priority:checked');
    var $inputDetail = $('.js-detail');
    var $numListed = $('.js-num-listed');
    var $numChecked = $('.js-num-checked');

    // 初期処理
    var todos = new app.common.Todos();
    for (var i = 0; i < todos.todoItems.length; i++) {
      $todolist.append('<li class="js-todoitem"><input type="checkbox" class="js-checkbox">' + todos.todoItems[i].title + '</input></li>');
    }

    // addボタンクリック
    $('.js-add').click(function () {
      if ($inputText.val()) {

        var todoItem = new app.common.Todo(Date.now().toString(), $inputText.val(), $inputPriority.val(), $inputDetail.val());
        localStorage.setItem(Date.now().toString(), JSON.stringify(item));

        $inputText.val('');
        $inputDetail.val('');
        refreshList();
        updateChecks();
      } else {
        console.log('未入力です');
      }
    });

    // checkboxクリック
    $todolist.click(function (event) {
      if ($(event.target).prop('checked')) {
        $(event.target).parent().css('text-decoration', 'line-through');
      } else {
        $(event.target).parent().css('text-decoration', 'none');
      }
      updateChecks();
    });

    // archiveボタンクリック
    $('.js-archive').click(function () {
      $('.js-checkbox:checked').parents('.js-todoitem').remove();
      updateChecks();
    });

    // デバッグ用テストボタン
    $('.js-test').click(function () {
      // // todos&localStorageに追加
      // todos.add(app.common.setItem('1','2','3'));
      // console.log(todos);

    });

    function updateChecks() {
      $numListed.text($('.js-todolist > li').length);
      $numChecked.text($('.js-checkbox:not(:checked)').length);
    };

    function refreshList() {
      for (var i = 0; i < localStorage.length; i++) {
        var itemKey = localStorage.key(i);

        if (/[0-9]{13}/.test(itemKey)) {
          var item = JSON.parse(localStorage.getItem(itemKey));
          $todolist.append('<li class="js-todoitem"><input type="checkbox" class="js-checkbox">' + item.title + '</input></li>');
        }
      }
    };
  });
})();
//# sourceMappingURL=data:application/json;base64,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QyxLQUFLLENBQUMsWUFBTTs7Ozs7S0FLekIsQ0FBQyxDQUFDOztBQUVILGFBQVMsWUFBWSxHQUFHO0FBQ3RCLGdCQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLGlCQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzFELENBQUM7O0FBRUYsYUFBUyxXQUFXLEdBQUc7QUFDckIsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUMsWUFBSSxPQUFPLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbEMsWUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzdCLGNBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3JELG1CQUFTLENBQUMsTUFBTSxDQUFDLHFFQUFxRSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLENBQUM7U0FDeEg7T0FDRjtLQUNGLENBQUM7R0FFTCxDQUFDLENBQUM7Q0FDSixDQUFBLEVBQUcsQ0FBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHNcIiAvPlxyXG52YXIgYXBwID0gYXBwIHx8IHt9O1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICAkKGZ1bmN0aW9uKCkge1xyXG4gXHJcbiAgICAgIGNvbnN0ICR0b2RvbGlzdCAgICAgID0gJCgnLmpzLXRvZG9saXN0Jyk7XHJcbiAgICAgIGNvbnN0ICRpbnB1dFRleHQgICAgID0gJCgnLmpzLXRleHQnKTtcclxuICAgICAgY29uc3QgJGlucHV0UHJpb3JpdHkgPSAkKCcuanMtcHJpb3JpdHk6Y2hlY2tlZCcpO1xyXG4gICAgICBjb25zdCAkaW5wdXREZXRhaWwgICA9ICQoJy5qcy1kZXRhaWwnKTtcclxuICAgICAgY29uc3QgJG51bUxpc3RlZCAgICAgPSAkKCcuanMtbnVtLWxpc3RlZCcpO1xyXG4gICAgICBjb25zdCAkbnVtQ2hlY2tlZCAgICA9ICQoJy5qcy1udW0tY2hlY2tlZCcpO1xyXG4gICAgICBcclxuICAgICAgLy8g5Yid5pyf5Yem55CGXHJcbiAgICAgIGxldCB0b2RvcyA9IG5ldyBhcHAuY29tbW9uLlRvZG9zO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvZG9zLnRvZG9JdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICR0b2RvbGlzdC5hcHBlbmQoJzxsaSBjbGFzcz1cImpzLXRvZG9pdGVtXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwianMtY2hlY2tib3hcIj4nICsgdG9kb3MudG9kb0l0ZW1zW2ldLnRpdGxlICsgJzwvaW5wdXQ+PC9saT4nKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gYWRk44Oc44K/44Oz44Kv44Oq44OD44KvXHJcbiAgICAgICQoJy5qcy1hZGQnKS5jbGljaygoKSA9PiB7XHJcbiAgICAgICAgaWYoJGlucHV0VGV4dC52YWwoKSkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBsZXQgdG9kb0l0ZW0gPSBuZXcgYXBwLmNvbW1vbi5Ub2RvKERhdGUubm93KCkudG9TdHJpbmcoKSwgJGlucHV0VGV4dC52YWwoKSwgJGlucHV0UHJpb3JpdHkudmFsKCksICRpbnB1dERldGFpbC52YWwoKSk7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShEYXRlLm5vdygpLnRvU3RyaW5nKCksIEpTT04uc3RyaW5naWZ5KGl0ZW0pKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgJGlucHV0VGV4dC52YWwoJycpO1xyXG4gICAgICAgICAgJGlucHV0RGV0YWlsLnZhbCgnJyk7XHJcbiAgICAgICAgICByZWZyZXNoTGlzdCgpO1xyXG4gICAgICAgICAgdXBkYXRlQ2hlY2tzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCfmnKrlhaXlipvjgafjgZknKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgLy8gY2hlY2tib3jjgq/jg6rjg4Pjgq9cclxuICAgICAgJHRvZG9saXN0LmNsaWNrKChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkucHJvcCgnY2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50KCkuY3NzKCd0ZXh0LWRlY29yYXRpb24nLCAnbGluZS10aHJvdWdoJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnQoKS5jc3MoJ3RleHQtZGVjb3JhdGlvbicsICdub25lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZUNoZWNrcygpO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIC8vIGFyY2hpdmXjg5zjgr/jg7Pjgq/jg6rjg4Pjgq9cclxuICAgICAgJCgnLmpzLWFyY2hpdmUnKS5jbGljaygoKSA9PiB7XHJcbiAgICAgICAgJCgnLmpzLWNoZWNrYm94OmNoZWNrZWQnKS5wYXJlbnRzKCcuanMtdG9kb2l0ZW0nKS5yZW1vdmUoKTtcclxuICAgICAgICB1cGRhdGVDaGVja3MoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgICAgLy8g44OH44OQ44OD44Kw55So44OG44K544OI44Oc44K/44OzXHJcbiAgICAgICQoJy5qcy10ZXN0JykuY2xpY2soKCkgPT4ge1xyXG4gICAgICAgIC8vIC8vIHRvZG9zJmxvY2FsU3RvcmFnZeOBq+i/veWKoFxyXG4gICAgICAgIC8vIHRvZG9zLmFkZChhcHAuY29tbW9uLnNldEl0ZW0oJzEnLCcyJywnMycpKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0b2Rvcyk7XHJcbiAgICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gdXBkYXRlQ2hlY2tzKCkge1xyXG4gICAgICAgICRudW1MaXN0ZWQudGV4dCgkKCcuanMtdG9kb2xpc3QgPiBsaScpLmxlbmd0aCk7XHJcbiAgICAgICAgJG51bUNoZWNrZWQudGV4dCgkKCcuanMtY2hlY2tib3g6bm90KDpjaGVja2VkKScpLmxlbmd0aCk7XHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICBmdW5jdGlvbiByZWZyZXNoTGlzdCgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2FsU3RvcmFnZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1LZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoL1swLTldezEzfS8udGVzdChpdGVtS2V5KSkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oaXRlbUtleSkpO1xyXG4gICAgICAgICAgICAkdG9kb2xpc3QuYXBwZW5kKCc8bGkgY2xhc3M9XCJqcy10b2RvaXRlbVwiPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImpzLWNoZWNrYm94XCI+JyArIGl0ZW0udGl0bGUgKyAnPC9pbnB1dD48L2xpPicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTsgIFxyXG4gICAgXHJcbiAgfSk7XHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==